Tasks (in order):
[X] Create a command line argument parser with 'clap' library
[X] Get file content and filter it to remove comments and empty lines
[X] Check puzzle size (as N in range [3, 100])
[X] Check puzzle validity (puzzle size, correct number of cols and rows, valid numbers, numbers in range, duplicate numbers)
[X] Generate goal state depending on its style (snail, ascending or descending)
[X] Check if the puzzle is solvable
[X] Create Unit tests and Integration tests
[X] Create a generator of random puzzles available from command line
[X] Create heuristic functions
[X] Create open set as a priority queue with F cost as priority
[X] Create close set as a hash map (see Optimization section)
[X] Create A* algo with its variants (weighted, greedy, uniform cost)
[X] Create function(s) to print solution (complexity of time & memory, number of moves, each state of final path, exec time)
[ ] Add IDA* algorithm
[-] (Canceled) Decide to use either async with tokio crate (if possible) or multithreading with crossbeam / rayon crate
[-] (Canceled) Create a feature to estimate npuzzle time with a multivariate regression model.
	Model features:
		- heuristic value of start node
		- type of heuristic mapped from 0 to 3 (misplaced: 0, axes: 1, manhattan: 2, conflict: 3)
		- type of algorithm (uniform: 0, memory limited A*: 1, standard A*: 2, greedy: 3)
